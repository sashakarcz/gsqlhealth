//line /home/sasha/gsqlhealth/cmd/gsqlhealth/main.go:1:1
package main; import _ "runtime/coverage"

import (
	"context"
	"flag"
	"fmt"
	"log/slog"
	"os"
	"os/signal"
	"syscall"
	"time"

	"gsqlhealth/internal/config"
	"gsqlhealth/internal/health"
	"gsqlhealth/internal/server"
)

const (
	defaultConfigPath = "config.yaml"
	shutdownTimeout   = 30 * time.Second
)

func main() {goCover_a44ebcf004fa__0[0] = 20 ; goCover_a44ebcf004fa__0[1] = goCover_a44ebcf004fa_P ; goCover_a44ebcf004fa__0[2] = 0 ; goCover_a44ebcf004fa__0[3] = 1;
	// Parse command line flags
	var (
		configPath = flag.String("config", defaultConfigPath, "Path to configuration file")
		version    = flag.Bool("version", false, "Show version information")
		validate   = flag.Bool("validate", false, "Validate configuration and exit")
	)
	flag.Parse()

	// Show version
	if *version {goCover_a44ebcf004fa__0[12] = 1;
		fmt.Println("gsqlhealth v1.0.0")
		fmt.Println("Database health monitoring service")
		os.Exit(0)
	}

	// Load configuration
	goCover_a44ebcf004fa__0[4] = 1;cfg, err := config.LoadConfig(*configPath)
	if err != nil {goCover_a44ebcf004fa__0[13] = 1;
		fmt.Fprintf(os.Stderr, "Failed to load configuration: %v\n", err)
		os.Exit(1)
	}

	// Validate configuration and exit if requested
	goCover_a44ebcf004fa__0[5] = 1;if *validate {goCover_a44ebcf004fa__0[14] = 1;
		fmt.Println("Configuration is valid")
		os.Exit(0)
	}

	// Setup logger
	goCover_a44ebcf004fa__0[6] = 1;logger := setupLogger(cfg.Logging)
	logger.Info("Starting gsqlhealth",
		"version", "1.0.0",
		"config_path", *configPath)

	// Create context for graceful shutdown
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// Create health service
	healthService := health.NewService(cfg, logger)

	// Initialize database connections
	logger.Info("Initializing database connections")
	if err := healthService.Initialize(ctx); err != nil {goCover_a44ebcf004fa__0[15] = 1;
		logger.Error("Failed to initialize health service", "error", err)
		os.Exit(1)
	}

	// Create HTTP server
	goCover_a44ebcf004fa__0[7] = 1;httpServer := server.NewServer(cfg, healthService, logger)

	// Setup graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	// Start HTTP server in a goroutine
	serverErrChan := make(chan error, 1)
	go func() {goCover_a44ebcf004fa__0[16] = 1;
		logger.Info("HTTP server starting",
			"address", cfg.Server.GetAddress())

		if err := httpServer.Start(); err != nil {goCover_a44ebcf004fa__0[17] = 1;
			serverErrChan <- err
		}
	}()

	// Wait for shutdown signal or server error
	goCover_a44ebcf004fa__0[8] = 1;select {
	case err := <-serverErrChan:goCover_a44ebcf004fa__0[18] = 1;
		if err != nil {goCover_a44ebcf004fa__0[20] = 1;
			logger.Error("HTTP server error", "error", err)
		}
	case sig := <-sigChan:goCover_a44ebcf004fa__0[19] = 1;
		logger.Info("Received shutdown signal", "signal", sig.String())
	}

	// Graceful shutdown
	goCover_a44ebcf004fa__0[9] = 1;logger.Info("Shutting down gracefully", "timeout", shutdownTimeout)

	// Create shutdown context with timeout
	shutdownCtx, shutdownCancel := context.WithTimeout(context.Background(), shutdownTimeout)
	defer shutdownCancel()

	// Shutdown HTTP server
	if err := httpServer.Shutdown(shutdownCtx); err != nil {goCover_a44ebcf004fa__0[21] = 1;
		logger.Error("Error shutting down HTTP server", "error", err)
	}

	// Close database connections
	goCover_a44ebcf004fa__0[10] = 1;if err := healthService.Close(); err != nil {goCover_a44ebcf004fa__0[22] = 1;
		logger.Error("Error closing database connections", "error", err)
	}

	goCover_a44ebcf004fa__0[11] = 1;logger.Info("Shutdown complete")
}

// setupLogger creates and configures the logger based on configuration
func setupLogger(logConfig config.Logging) *slog.Logger {goCover_a44ebcf004fa__1[0] = 11 ; goCover_a44ebcf004fa__1[1] = goCover_a44ebcf004fa_P ; goCover_a44ebcf004fa__1[2] = 1 ; goCover_a44ebcf004fa__1[3] = 1;
	var level slog.Level

	// Parse log level
	switch logConfig.Level {
	case "debug":goCover_a44ebcf004fa__1[6] = 1;
		level = slog.LevelDebug
	case "info":goCover_a44ebcf004fa__1[7] = 1;
		level = slog.LevelInfo
	case "warn", "warning":goCover_a44ebcf004fa__1[8] = 1;
		level = slog.LevelWarn
	case "error":goCover_a44ebcf004fa__1[9] = 1;
		level = slog.LevelError
	default:goCover_a44ebcf004fa__1[10] = 1;
		level = slog.LevelInfo
	}

	// Create handler options
	goCover_a44ebcf004fa__1[4] = 1;opts := &slog.HandlerOptions{
		Level: level,
		AddSource: level == slog.LevelDebug, // Add source info for debug level
	}

	var handler slog.Handler

	// Choose handler based on format
	switch logConfig.Format {
	case "json":goCover_a44ebcf004fa__1[11] = 1;
		handler = slog.NewJSONHandler(os.Stdout, opts)
	case "text":goCover_a44ebcf004fa__1[12] = 1;
		handler = slog.NewTextHandler(os.Stdout, opts)
	default:goCover_a44ebcf004fa__1[13] = 1;
		// Default to JSON for better structured logging
		handler = slog.NewJSONHandler(os.Stdout, opts)
	}

	goCover_a44ebcf004fa__1[5] = 1;return slog.New(handler)
}