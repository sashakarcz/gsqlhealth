//line /home/sasha/gsqlhealth/internal/database/postgres.go:1:1
package database

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	_ "github.com/lib/pq"
)

// PostgreSQLDriver implements the Driver interface for PostgreSQL databases
type PostgreSQLDriver struct {
	db *sql.DB
}

// NewPostgreSQLDriver creates a new PostgreSQL driver instance
func NewPostgreSQLDriver() *PostgreSQLDriver {goCover_d9c7f9aa98b6__24[0] = 1 ; goCover_d9c7f9aa98b6__24[1] = goCover_d9c7f9aa98b6_P ; goCover_d9c7f9aa98b6__24[2] = 24 ; goCover_d9c7f9aa98b6__24[3] = 1;
	return &PostgreSQLDriver{}
}

// Connect establishes a connection to the PostgreSQL database
func (d *PostgreSQLDriver) Connect(ctx context.Context, info ConnectionInfo) error {goCover_d9c7f9aa98b6__25[0] = 5 ; goCover_d9c7f9aa98b6__25[1] = goCover_d9c7f9aa98b6_P ; goCover_d9c7f9aa98b6__25[2] = 25 ; goCover_d9c7f9aa98b6__25[3] = 1;
	dsn := d.buildDSN(info)

	var err error
	d.db, err = sql.Open("postgres", dsn)
	if err != nil {goCover_d9c7f9aa98b6__25[6] = 1;
		return fmt.Errorf("failed to open PostgreSQL connection: %w", err)
	}

	// Configure connection pool settings
	goCover_d9c7f9aa98b6__25[4] = 1;d.db.SetMaxOpenConns(25)
	d.db.SetMaxIdleConns(5)
	d.db.SetConnMaxLifetime(5 * time.Minute)
	d.db.SetConnMaxIdleTime(1 * time.Minute)

	// Test the connection
	ctx, cancel := context.WithTimeout(ctx, info.Timeout)
	defer cancel()

	if err := d.db.PingContext(ctx); err != nil {goCover_d9c7f9aa98b6__25[7] = 1;
		d.db.Close()
		return fmt.Errorf("failed to ping PostgreSQL database: %w", err)
	}

	goCover_d9c7f9aa98b6__25[5] = 1;return nil
}

// Close closes the PostgreSQL database connection
func (d *PostgreSQLDriver) Close() error {goCover_d9c7f9aa98b6__26[0] = 3 ; goCover_d9c7f9aa98b6__26[1] = goCover_d9c7f9aa98b6_P ; goCover_d9c7f9aa98b6__26[2] = 26 ; goCover_d9c7f9aa98b6__26[3] = 1;
	if d.db != nil {goCover_d9c7f9aa98b6__26[5] = 1;
		return d.db.Close()
	}
	goCover_d9c7f9aa98b6__26[4] = 1;return nil
}

// ExecuteHealthCheck executes a health check query and returns the results
func (d *PostgreSQLDriver) ExecuteHealthCheck(ctx context.Context, query string) (map[string]interface{}, error) {goCover_d9c7f9aa98b6__27[0] = 5 ; goCover_d9c7f9aa98b6__27[1] = goCover_d9c7f9aa98b6_P ; goCover_d9c7f9aa98b6__27[2] = 27 ; goCover_d9c7f9aa98b6__27[3] = 1;
	if d.db == nil {goCover_d9c7f9aa98b6__27[6] = 1;
		return nil, fmt.Errorf("database connection is not established")
	}

	goCover_d9c7f9aa98b6__27[4] = 1;rows, err := d.db.QueryContext(ctx, query)
	if err != nil {goCover_d9c7f9aa98b6__27[7] = 1;
		return nil, fmt.Errorf("failed to execute query: %w", err)
	}
	goCover_d9c7f9aa98b6__27[5] = 1;defer rows.Close()

	return d.processRows(rows)
}

// Ping tests the database connection
func (d *PostgreSQLDriver) Ping(ctx context.Context) error {goCover_d9c7f9aa98b6__28[0] = 3 ; goCover_d9c7f9aa98b6__28[1] = goCover_d9c7f9aa98b6_P ; goCover_d9c7f9aa98b6__28[2] = 28 ; goCover_d9c7f9aa98b6__28[3] = 1;
	if d.db == nil {goCover_d9c7f9aa98b6__28[5] = 1;
		return fmt.Errorf("database connection is not established")
	}
	goCover_d9c7f9aa98b6__28[4] = 1;return d.db.PingContext(ctx)
}

// GetDriverName returns the name of the database driver
func (d *PostgreSQLDriver) GetDriverName() string {goCover_d9c7f9aa98b6__29[0] = 1 ; goCover_d9c7f9aa98b6__29[1] = goCover_d9c7f9aa98b6_P ; goCover_d9c7f9aa98b6__29[2] = 29 ; goCover_d9c7f9aa98b6__29[3] = 1;
	return "postgres"
}

// buildDSN constructs the PostgreSQL data source name
func (d *PostgreSQLDriver) buildDSN(info ConnectionInfo) string {goCover_d9c7f9aa98b6__30[0] = 12 ; goCover_d9c7f9aa98b6__30[1] = goCover_d9c7f9aa98b6_P ; goCover_d9c7f9aa98b6__30[2] = 30 ; goCover_d9c7f9aa98b6__30[3] = 1;
	var params []string

	// Basic connection parameters
	params = append(params, fmt.Sprintf("host=%s", info.Host))
	params = append(params, fmt.Sprintf("port=%d", info.Port))
	params = append(params, fmt.Sprintf("user=%s", info.Username))
	params = append(params, fmt.Sprintf("password=%s", info.Password))
	params = append(params, fmt.Sprintf("dbname=%s", info.Database))

	// SSL Mode configuration
	sslMode := "prefer" // default
	if info.SSLMode != "" {goCover_d9c7f9aa98b6__30[6] = 1;
		switch strings.ToLower(info.SSLMode) {
		case "disable":goCover_d9c7f9aa98b6__30[7] = 1;
			sslMode = "disable"
		case "allow":goCover_d9c7f9aa98b6__30[8] = 1;
			sslMode = "allow"
		case "prefer":goCover_d9c7f9aa98b6__30[9] = 1;
			sslMode = "prefer"
		case "require":goCover_d9c7f9aa98b6__30[10] = 1;
			sslMode = "require"
		case "verify-ca":goCover_d9c7f9aa98b6__30[11] = 1;
			sslMode = "verify-ca"
		case "verify-full":goCover_d9c7f9aa98b6__30[12] = 1;
			sslMode = "verify-full"
		default:goCover_d9c7f9aa98b6__30[13] = 1;
			sslMode = "prefer"
		}
	}
	goCover_d9c7f9aa98b6__30[4] = 1;params = append(params, fmt.Sprintf("sslmode=%s", sslMode))

	// Connection timeout
	if info.Timeout > 0 {goCover_d9c7f9aa98b6__30[14] = 1;
		timeoutSeconds := int(info.Timeout.Seconds())
		params = append(params, fmt.Sprintf("connect_timeout=%d", timeoutSeconds))
	}

	// Application name for easier identification in logs
	goCover_d9c7f9aa98b6__30[5] = 1;params = append(params, "application_name=gsqlhealth")

	// Enable binary format for better performance
	params = append(params, "binary_parameters=yes")

	return strings.Join(params, " ")
}

// processRows processes SQL query results and returns them as a map
func (d *PostgreSQLDriver) processRows(rows *sql.Rows) (map[string]interface{}, error) {goCover_d9c7f9aa98b6__31[0] = 20 ; goCover_d9c7f9aa98b6__31[1] = goCover_d9c7f9aa98b6_P ; goCover_d9c7f9aa98b6__31[2] = 31 ; goCover_d9c7f9aa98b6__31[3] = 1;
	columns, err := rows.Columns()
	if err != nil {goCover_d9c7f9aa98b6__31[9] = 1;
		return nil, fmt.Errorf("failed to get column names: %w", err)
	}

	goCover_d9c7f9aa98b6__31[4] = 1;columnTypes, err := rows.ColumnTypes()
	if err != nil {goCover_d9c7f9aa98b6__31[10] = 1;
		return nil, fmt.Errorf("failed to get column types: %w", err)
	}

	goCover_d9c7f9aa98b6__31[5] = 1;result := make(map[string]interface{})

	// If we have multiple rows, collect them in an array
	var allResults []map[string]interface{}

	for rows.Next() {goCover_d9c7f9aa98b6__31[11] = 1;
		// Create a slice of interface{} to hold the values
		values := make([]interface{}, len(columns))
		valuePtrs := make([]interface{}, len(columns))

		// Create pointers to the values
		for i := range values {goCover_d9c7f9aa98b6__31[15] = 1;
			valuePtrs[i] = &values[i]
		}

		// Scan the values
		goCover_d9c7f9aa98b6__31[12] = 1;if err := rows.Scan(valuePtrs...); err != nil {goCover_d9c7f9aa98b6__31[16] = 1;
			return nil, fmt.Errorf("failed to scan row: %w", err)
		}

		// Convert values to appropriate types
		goCover_d9c7f9aa98b6__31[13] = 1;rowResult := make(map[string]interface{})
		for i, col := range columns {goCover_d9c7f9aa98b6__31[17] = 1;
			rowResult[col] = d.convertValue(values[i], columnTypes[i])
		}

		goCover_d9c7f9aa98b6__31[14] = 1;allResults = append(allResults, rowResult)
	}

	goCover_d9c7f9aa98b6__31[6] = 1;if err := rows.Err(); err != nil {goCover_d9c7f9aa98b6__31[18] = 1;
		return nil, fmt.Errorf("error iterating over rows: %w", err)
	}

	// If we only have one row, return it directly
	// Otherwise, return all results
	goCover_d9c7f9aa98b6__31[7] = 1;if len(allResults) == 1 {goCover_d9c7f9aa98b6__31[19] = 1;
		result = allResults[0]
	} else{ goCover_d9c7f9aa98b6__31[20] = 1;if len(allResults) > 1 {goCover_d9c7f9aa98b6__31[21] = 1;
		result["results"] = allResults
		result["row_count"] = len(allResults)
	} else{ goCover_d9c7f9aa98b6__31[22] = 1;{
		result["row_count"] = 0
	}}}

	goCover_d9c7f9aa98b6__31[8] = 1;return result, nil
}

// convertValue converts a database value to an appropriate Go type
func (d *PostgreSQLDriver) convertValue(value interface{}, colType *sql.ColumnType) interface{} {goCover_d9c7f9aa98b6__32[0] = 14 ; goCover_d9c7f9aa98b6__32[1] = goCover_d9c7f9aa98b6_P ; goCover_d9c7f9aa98b6__32[2] = 32 ; goCover_d9c7f9aa98b6__32[3] = 1;
	if value == nil {goCover_d9c7f9aa98b6__32[8] = 1;
		return nil
	}

	// Handle byte arrays (common for bytea fields)
	goCover_d9c7f9aa98b6__32[4] = 1;if byteVal, ok := value.([]byte); ok {goCover_d9c7f9aa98b6__32[9] = 1;
		// Try to convert to string if it's valid UTF-8
		str := string(byteVal)
		return str
	}

	// Handle time values
	goCover_d9c7f9aa98b6__32[5] = 1;if timeVal, ok := value.(time.Time); ok {goCover_d9c7f9aa98b6__32[10] = 1;
		return timeVal.Format(time.RFC3339)
	}

	// Handle PostgreSQL arrays (they come as strings from pq driver)
	goCover_d9c7f9aa98b6__32[6] = 1;if strVal, ok := value.(string); ok {goCover_d9c7f9aa98b6__32[11] = 1;
		// Check if it looks like a PostgreSQL array
		if strings.HasPrefix(strVal, "{") && strings.HasSuffix(strVal, "}") {goCover_d9c7f9aa98b6__32[12] = 1;
			// Parse simple arrays (this is a basic implementation)
			content := strings.Trim(strVal, "{}")
			if content != "" {goCover_d9c7f9aa98b6__32[14] = 1;
				elements := strings.Split(content, ",")
				for i, elem := range elements {goCover_d9c7f9aa98b6__32[16] = 1;
					elements[i] = strings.TrimSpace(elem)
				}
				goCover_d9c7f9aa98b6__32[15] = 1;return elements
			}
			goCover_d9c7f9aa98b6__32[13] = 1;return []string{}
		}
	}

	goCover_d9c7f9aa98b6__32[7] = 1;return value
}