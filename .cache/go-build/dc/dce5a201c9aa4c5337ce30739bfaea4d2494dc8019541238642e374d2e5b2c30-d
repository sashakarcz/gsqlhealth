//line /home/sasha/gsqlhealth/internal/config/config.go:1:1
package config

import (
	"fmt"
	"os"
	"time"

	"gopkg.in/yaml.v3"
)

// Config represents the main configuration structure
type Config struct {
	Databases []Database `yaml:"databases"`
	Server    Server     `yaml:"server"`
	Logging   Logging    `yaml:"logging"`
	Retry     Retry      `yaml:"retry"`
}

// Database represents a database connection configuration
type Database struct {
	Name     string  `yaml:"name"`
	Type     string  `yaml:"type"`
	Host     string  `yaml:"host"`
	Port     int     `yaml:"port"`
	Username string  `yaml:"username"`
	Password string  `yaml:"password"`
	Database string  `yaml:"database"`
	SSLMode  string  `yaml:"ssl_mode,omitempty"`
	Tables   []Table `yaml:"tables"`
}

// Table represents a table health check configuration
type Table struct {
	Name          string `yaml:"name"`
	Query         string `yaml:"query"`
	Timeout       int    `yaml:"timeout"`        // timeout in seconds
	CheckInterval int    `yaml:"check_interval"` // check interval in seconds
}

// Server represents HTTP server configuration
type Server struct {
	Host         string `yaml:"host"`
	Port         int    `yaml:"port"`
	ReadTimeout  int    `yaml:"read_timeout"`
	WriteTimeout int    `yaml:"write_timeout"`
	IdleTimeout  int    `yaml:"idle_timeout"`
}

// Logging represents logging configuration
type Logging struct {
	Level  string `yaml:"level"`
	Format string `yaml:"format"`
}

// Retry represents connection retry configuration
type Retry struct {
	MaxAttempts     int `yaml:"max_attempts"`      // Maximum number of retry attempts (0 = infinite)
	InitialDelay    int `yaml:"initial_delay"`     // Initial retry delay in seconds
	MaxDelay        int `yaml:"max_delay"`         // Maximum retry delay in seconds
	BackoffFactor   int `yaml:"backoff_factor"`    // Exponential backoff multiplier
	ConnectionRetry int `yaml:"connection_retry"`  // Retry interval for connection recovery in seconds
}

// LoadConfig loads configuration from a YAML file
func LoadConfig(filename string) (*Config, error) {goCover_7f78effce6a5__0[0] = 7 ; goCover_7f78effce6a5__0[1] = goCover_7f78effce6a5_P ; goCover_7f78effce6a5__0[2] = 0 ; goCover_7f78effce6a5__0[3] = 1;
	data, err := os.ReadFile(filename)
	if err != nil {goCover_7f78effce6a5__0[7] = 1;
		return nil, fmt.Errorf("failed to read config file: %w", err)
	}

	goCover_7f78effce6a5__0[4] = 1;var config Config
	if err := yaml.Unmarshal(data, &config); err != nil {goCover_7f78effce6a5__0[8] = 1;
		return nil, fmt.Errorf("failed to parse config file: %w", err)
	}

	// Set defaults for retry configuration
	goCover_7f78effce6a5__0[5] = 1;config.Retry.SetDefaults()

	if err := config.Validate(); err != nil {goCover_7f78effce6a5__0[9] = 1;
		return nil, fmt.Errorf("invalid configuration: %w", err)
	}

	goCover_7f78effce6a5__0[6] = 1;return &config, nil
}

// Validate performs validation on the configuration
func (c *Config) Validate() error {goCover_7f78effce6a5__1[0] = 10 ; goCover_7f78effce6a5__1[1] = goCover_7f78effce6a5_P ; goCover_7f78effce6a5__1[2] = 1 ; goCover_7f78effce6a5__1[3] = 1;
	if len(c.Databases) == 0 {goCover_7f78effce6a5__1[8] = 1;
		return fmt.Errorf("at least one database must be configured")
	}

	goCover_7f78effce6a5__1[4] = 1;for i, db := range c.Databases {goCover_7f78effce6a5__1[9] = 1;
		if err := db.Validate(); err != nil {goCover_7f78effce6a5__1[10] = 1;
			return fmt.Errorf("database %d (%s): %w", i, db.Name, err)
		}
	}

	goCover_7f78effce6a5__1[5] = 1;if err := c.Server.Validate(); err != nil {goCover_7f78effce6a5__1[11] = 1;
		return fmt.Errorf("server configuration: %w", err)
	}

	goCover_7f78effce6a5__1[6] = 1;if err := c.Retry.Validate(); err != nil {goCover_7f78effce6a5__1[12] = 1;
		return fmt.Errorf("retry configuration: %w", err)
	}

	goCover_7f78effce6a5__1[7] = 1;return nil
}

// Validate validates database configuration
func (d *Database) Validate() error {goCover_7f78effce6a5__2[0] = 18 ; goCover_7f78effce6a5__2[1] = goCover_7f78effce6a5_P ; goCover_7f78effce6a5__2[2] = 2 ; goCover_7f78effce6a5__2[3] = 1;
	if d.Name == "" {goCover_7f78effce6a5__2[12] = 1;
		return fmt.Errorf("database name is required")
	}

	goCover_7f78effce6a5__2[4] = 1;if d.Type != "mysql" && d.Type != "postgres" && d.Type != "mssql" {goCover_7f78effce6a5__2[13] = 1;
		return fmt.Errorf("unsupported database type: %s", d.Type)
	}

	goCover_7f78effce6a5__2[5] = 1;if d.Host == "" {goCover_7f78effce6a5__2[14] = 1;
		return fmt.Errorf("database host is required")
	}

	goCover_7f78effce6a5__2[6] = 1;if d.Port <= 0 || d.Port > 65535 {goCover_7f78effce6a5__2[15] = 1;
		return fmt.Errorf("invalid port number: %d", d.Port)
	}

	goCover_7f78effce6a5__2[7] = 1;if d.Username == "" {goCover_7f78effce6a5__2[16] = 1;
		return fmt.Errorf("database username is required")
	}

	goCover_7f78effce6a5__2[8] = 1;if d.Database == "" {goCover_7f78effce6a5__2[17] = 1;
		return fmt.Errorf("database name is required")
	}

	goCover_7f78effce6a5__2[9] = 1;if len(d.Tables) == 0 {goCover_7f78effce6a5__2[18] = 1;
		return fmt.Errorf("at least one table must be configured")
	}

	goCover_7f78effce6a5__2[10] = 1;for i, table := range d.Tables {goCover_7f78effce6a5__2[19] = 1;
		if err := table.Validate(); err != nil {goCover_7f78effce6a5__2[20] = 1;
			return fmt.Errorf("table %d (%s): %w", i, table.Name, err)
		}
	}

	goCover_7f78effce6a5__2[11] = 1;return nil
}

// Validate validates table configuration
func (t *Table) Validate() error {goCover_7f78effce6a5__3[0] = 9 ; goCover_7f78effce6a5__3[1] = goCover_7f78effce6a5_P ; goCover_7f78effce6a5__3[2] = 3 ; goCover_7f78effce6a5__3[3] = 1;
	if t.Name == "" {goCover_7f78effce6a5__3[8] = 1;
		return fmt.Errorf("table name is required")
	}

	goCover_7f78effce6a5__3[4] = 1;if t.Query == "" {goCover_7f78effce6a5__3[9] = 1;
		return fmt.Errorf("table query is required")
	}

	goCover_7f78effce6a5__3[5] = 1;if t.Timeout <= 0 {goCover_7f78effce6a5__3[10] = 1;
		return fmt.Errorf("timeout must be positive")
	}

	goCover_7f78effce6a5__3[6] = 1;if t.CheckInterval <= 0 {goCover_7f78effce6a5__3[11] = 1;
		return fmt.Errorf("check_interval must be positive")
	}

	goCover_7f78effce6a5__3[7] = 1;return nil
}

// Validate validates server configuration
func (s *Server) Validate() error {goCover_7f78effce6a5__4[0] = 11 ; goCover_7f78effce6a5__4[1] = goCover_7f78effce6a5_P ; goCover_7f78effce6a5__4[2] = 4 ; goCover_7f78effce6a5__4[3] = 1;
	if s.Host == "" {goCover_7f78effce6a5__4[9] = 1;
		return fmt.Errorf("server host is required")
	}

	goCover_7f78effce6a5__4[4] = 1;if s.Port <= 0 || s.Port > 65535 {goCover_7f78effce6a5__4[10] = 1;
		return fmt.Errorf("invalid server port: %d", s.Port)
	}

	goCover_7f78effce6a5__4[5] = 1;if s.ReadTimeout <= 0 {goCover_7f78effce6a5__4[11] = 1;
		return fmt.Errorf("read timeout must be positive")
	}

	goCover_7f78effce6a5__4[6] = 1;if s.WriteTimeout <= 0 {goCover_7f78effce6a5__4[12] = 1;
		return fmt.Errorf("write timeout must be positive")
	}

	goCover_7f78effce6a5__4[7] = 1;if s.IdleTimeout <= 0 {goCover_7f78effce6a5__4[13] = 1;
		return fmt.Errorf("idle timeout must be positive")
	}

	goCover_7f78effce6a5__4[8] = 1;return nil
}

// GetAddress returns the server address in host:port format
func (s *Server) GetAddress() string {goCover_7f78effce6a5__5[0] = 1 ; goCover_7f78effce6a5__5[1] = goCover_7f78effce6a5_P ; goCover_7f78effce6a5__5[2] = 5 ; goCover_7f78effce6a5__5[3] = 1;
	return fmt.Sprintf("%s:%d", s.Host, s.Port)
}

// GetReadTimeout returns read timeout as time.Duration
func (s *Server) GetReadTimeout() time.Duration {goCover_7f78effce6a5__6[0] = 1 ; goCover_7f78effce6a5__6[1] = goCover_7f78effce6a5_P ; goCover_7f78effce6a5__6[2] = 6 ; goCover_7f78effce6a5__6[3] = 1;
	return time.Duration(s.ReadTimeout) * time.Second
}

// GetWriteTimeout returns write timeout as time.Duration
func (s *Server) GetWriteTimeout() time.Duration {goCover_7f78effce6a5__7[0] = 1 ; goCover_7f78effce6a5__7[1] = goCover_7f78effce6a5_P ; goCover_7f78effce6a5__7[2] = 7 ; goCover_7f78effce6a5__7[3] = 1;
	return time.Duration(s.WriteTimeout) * time.Second
}

// GetIdleTimeout returns idle timeout as time.Duration
func (s *Server) GetIdleTimeout() time.Duration {goCover_7f78effce6a5__8[0] = 1 ; goCover_7f78effce6a5__8[1] = goCover_7f78effce6a5_P ; goCover_7f78effce6a5__8[2] = 8 ; goCover_7f78effce6a5__8[3] = 1;
	return time.Duration(s.IdleTimeout) * time.Second
}

// GetQueryTimeout returns query timeout as time.Duration
func (t *Table) GetQueryTimeout() time.Duration {goCover_7f78effce6a5__9[0] = 1 ; goCover_7f78effce6a5__9[1] = goCover_7f78effce6a5_P ; goCover_7f78effce6a5__9[2] = 9 ; goCover_7f78effce6a5__9[3] = 1;
	return time.Duration(t.Timeout) * time.Second
}

// GetCheckInterval returns check interval as time.Duration
func (t *Table) GetCheckInterval() time.Duration {goCover_7f78effce6a5__10[0] = 1 ; goCover_7f78effce6a5__10[1] = goCover_7f78effce6a5_P ; goCover_7f78effce6a5__10[2] = 10 ; goCover_7f78effce6a5__10[3] = 1;
	return time.Duration(t.CheckInterval) * time.Second
}

// Validate validates retry configuration
func (r *Retry) Validate() error {goCover_7f78effce6a5__11[0] = 13 ; goCover_7f78effce6a5__11[1] = goCover_7f78effce6a5_P ; goCover_7f78effce6a5__11[2] = 11 ; goCover_7f78effce6a5__11[3] = 1;
	if r.MaxAttempts < 0 {goCover_7f78effce6a5__11[10] = 1;
		return fmt.Errorf("max_attempts cannot be negative")
	}

	goCover_7f78effce6a5__11[4] = 1;if r.InitialDelay <= 0 {goCover_7f78effce6a5__11[11] = 1;
		return fmt.Errorf("initial_delay must be positive")
	}

	goCover_7f78effce6a5__11[5] = 1;if r.MaxDelay <= 0 {goCover_7f78effce6a5__11[12] = 1;
		return fmt.Errorf("max_delay must be positive")
	}

	goCover_7f78effce6a5__11[6] = 1;if r.InitialDelay > r.MaxDelay {goCover_7f78effce6a5__11[13] = 1;
		return fmt.Errorf("initial_delay cannot be greater than max_delay")
	}

	goCover_7f78effce6a5__11[7] = 1;if r.BackoffFactor <= 0 {goCover_7f78effce6a5__11[14] = 1;
		return fmt.Errorf("backoff_factor must be positive")
	}

	goCover_7f78effce6a5__11[8] = 1;if r.ConnectionRetry <= 0 {goCover_7f78effce6a5__11[15] = 1;
		return fmt.Errorf("connection_retry must be positive")
	}

	goCover_7f78effce6a5__11[9] = 1;return nil
}

// GetInitialDelay returns initial delay as time.Duration
func (r *Retry) GetInitialDelay() time.Duration {goCover_7f78effce6a5__12[0] = 1 ; goCover_7f78effce6a5__12[1] = goCover_7f78effce6a5_P ; goCover_7f78effce6a5__12[2] = 12 ; goCover_7f78effce6a5__12[3] = 1;
	return time.Duration(r.InitialDelay) * time.Second
}

// GetMaxDelay returns max delay as time.Duration
func (r *Retry) GetMaxDelay() time.Duration {goCover_7f78effce6a5__13[0] = 1 ; goCover_7f78effce6a5__13[1] = goCover_7f78effce6a5_P ; goCover_7f78effce6a5__13[2] = 13 ; goCover_7f78effce6a5__13[3] = 1;
	return time.Duration(r.MaxDelay) * time.Second
}

// GetConnectionRetry returns connection retry interval as time.Duration
func (r *Retry) GetConnectionRetry() time.Duration {goCover_7f78effce6a5__14[0] = 1 ; goCover_7f78effce6a5__14[1] = goCover_7f78effce6a5_P ; goCover_7f78effce6a5__14[2] = 14 ; goCover_7f78effce6a5__14[3] = 1;
	return time.Duration(r.ConnectionRetry) * time.Second
}

// SetDefaults sets default retry values if not specified
func (r *Retry) SetDefaults() {goCover_7f78effce6a5__15[0] = 2 ; goCover_7f78effce6a5__15[1] = goCover_7f78effce6a5_P ; goCover_7f78effce6a5__15[2] = 15 ; goCover_7f78effce6a5__15[3] = 1;
	if r.MaxAttempts == 0 && r.InitialDelay == 0 {goCover_7f78effce6a5__15[4] = 1;
		r.MaxAttempts = 0 // infinite retries
		r.InitialDelay = 5
		r.MaxDelay = 60
		r.BackoffFactor = 2
		r.ConnectionRetry = 30
	}
}